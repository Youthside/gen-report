"use client"

import { useState, useEffect, useMemo } from "react"
import { useGeminiChat } from "@/hooks/use-gemini-chat"
import {
  Loader2,
  CheckCircle,
  AlertCircle,
  ArrowRight,
  Filter,
  Search,
  BarChart3,
  Users,
  Briefcase,
  GraduationCap,
  Calendar,
  Mail,
  Phone,
  BookOpen,
  FileText,
  TrendingUp,
  Target,
  Zap,
  Award,
  RefreshCw,
} from "lucide-react"
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Button } from "@/components/ui/button"
import { Progress } from "@/components/ui/progress"
import {
  Drawer,
  DrawerContent,
  DrawerHeader,
  DrawerFooter,
  DrawerTitle,
  DrawerDescription,
} from "@/components/ui/drawer"
import { Input } from "@/components/ui/input"
import { Slider } from "@/components/ui/slider"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Separator } from "@/components/ui/separator"
import { ScrollArea } from "@/components/ui/scroll-area"

// Define the types based on your provided data structure
interface SubmissionData {
  submission_id: string
  Ad: string
  Soyad: string
  Mail_Adresi: string
  Telefon: string
  Egitim_Durumu: string
  Universite: string
  Bolum: string
  Sinif: string
  Aldigi_Dersler: string
  Tarih: string
}

interface AnalysisResult {
  submission_id: string
  payment_possibility: "yÃ¼ksek" | "orta" | "dÃ¼ÅŸÃ¼k"
  justification: string
  buyer_persona: string
  conversion_score: number
  recommended_strategy: string
  next_action: string
  isAnalyzing: boolean
  error?: string
}

interface FilterOptions {
  searchTerm: string
  paymentPossibility: string[]
  buyerPersona: string[]
  minScore: number
  maxScore: number
  educationStatus: string[]
  nextAction: string[]
}

// Default system prompt for the Gemini model
const DEFAULT_SYSTEM_PROMPT = `
## ğŸ“„ Modelfile.md â€“ Potansiyel SatÄ±n AlÄ±cÄ± Analizcisi

Sen bir eÄŸitim platformu iÃ§in potansiyel mÃ¼ÅŸterileri analiz eden bir yapay zeka asistanÄ±sÄ±n.
Sana verilen Ã¶ÄŸrenci bilgilerini analiz ederek, bu kiÅŸinin Ã¶deme yapma olasÄ±lÄ±ÄŸÄ±nÄ± ve dÃ¶nÃ¼ÅŸÃ¼m skorunu deÄŸerlendirmelisin.

### Ã‡Ä±ktÄ± FormatÄ±
YanÄ±tÄ±nÄ± her zaman aÅŸaÄŸÄ±daki JSON formatÄ±nda vermelisin:

\`\`\`json
{
  "payment_possibility": "yÃ¼ksek|orta|dÃ¼ÅŸÃ¼k",
  "justification": "DeÄŸerlendirmenin detaylÄ± aÃ§Ä±klamasÄ±",
  "buyer_persona": "AlÄ±cÄ± profili kategorisi",
  "conversion_score": 0-100 arasÄ± sayÄ±sal deÄŸer,
  "recommended_strategy": "Ã–nerilen pazarlama stratejisi",
  "next_action": "kampanya maili|telefon aramasÄ±|Ã¶zel teklif"
}
\`\`\`

### DeÄŸerlendirme Kriterleri
- EÄŸitim seviyesi ve bÃ¶lÃ¼mÃ¼
- SeÃ§tiÄŸi dersler ve ilgi alanlarÄ±
- Ãœniversite ve sÄ±nÄ±f bilgisi
- DiÄŸer demografik bilgiler

### AlÄ±cÄ± Profilleri
- "kariyer odaklÄ± Ã¶ÄŸrenci": Kariyerinde ilerlemek iÃ§in eÄŸitim alan kiÅŸiler
- "akademik odaklÄ± Ã¶ÄŸrenci": Akademik baÅŸarÄ±ya odaklanan kiÅŸiler
- "hobi amaÃ§lÄ± Ã¶ÄŸrenci": KiÅŸisel ilgi alanlarÄ± iÃ§in eÄŸitim alan kiÅŸiler
- "zorunlu eÄŸitim alan": Bir gereklilik nedeniyle eÄŸitim alan kiÅŸiler

### DÃ¶nÃ¼ÅŸÃ¼m Skoru
0-100 arasÄ±nda, kiÅŸinin Ã¶deme yapma olasÄ±lÄ±ÄŸÄ±nÄ± gÃ¶steren bir skor:
- 70-100: YÃ¼ksek olasÄ±lÄ±k
- 40-69: Orta olasÄ±lÄ±k
- 0-39: DÃ¼ÅŸÃ¼k olasÄ±lÄ±k
`

export default function GeminiAnalyzer({ submissions = [] }: { submissions?: SubmissionData[] }) {
  const [results, setResults] = useState<AnalysisResult[]>([])
  const [currentIndex, setCurrentIndex] = useState<number | null>(null)
  const [isAnalyzing, setIsAnalyzing] = useState(false)
  const [progress, setProgress] = useState(0)
  const [isDrawerOpen, setIsDrawerOpen] = useState(false)
  const [selectedResult, setSelectedResult] = useState<AnalysisResult | null>(null)
  const [selectedSubmission, setSelectedSubmission] = useState<SubmissionData | null>(null)
  const [isFilterOpen, setIsFilterOpen] = useState(false)
  const [filterOptions, setFilterOptions] = useState<FilterOptions>({
    searchTerm: "",
    paymentPossibility: [],
    buyerPersona: [],
    minScore: 0,
    maxScore: 100,
    educationStatus: [],
    nextAction: [],
  })
  const { sendMessage } = useGeminiChat(DEFAULT_SYSTEM_PROMPT)

  // Mock data for testing if no submissions are provided
  const mockSubmissions: SubmissionData[] =
    submissions.length > 0
      ? submissions
      : [
          {
            submission_id: "1",
            Ad: "Halil Murat",
            Soyad: "YÄ±ldÄ±z",
            Mail_Adresi: "halilmurat97@gmail.com",
            Telefon: "5551234567",
            Egitim_Durumu: "Lisans Ã–ÄŸrencisi",
            Universite: "Trakya Ãœniversitesi",
            Bolum: "Ä°ÅŸletme",
            Sinif: "2. SÄ±nÄ±f",
            Aldigi_Dersler: "SatÄ±ÅŸ, Pazarlama ve Marka Yaratma",
            Tarih: "2023-04-15",
          },
          {
            submission_id: "2",
            Ad: "Emine Nur",
            Soyad: "YÄ±ldÄ±z",
            Mail_Adresi: "eminenuryildiz@ogr.istanbul.edu.tr",
            Telefon: "5559876543",
            Egitim_Durumu: "Lisans Ã–ÄŸrencisi",
            Universite: "Ä°stanbul Ãœniversitesi",
            Bolum: "Ä°ÅŸletme",
            Sinif: "3. SÄ±nÄ±f",
            Aldigi_Dersler: "YazÄ±lÄ±m Teknolojileri ve Yapay Zeka, Dijital Pazarlama, SatÄ±ÅŸ ve Pazarlama",
            Tarih: "2023-04-16",
          },
          {
            submission_id: "3",
            Ad: "Hatice Aylin",
            Soyad: "GÃ¼lenÃ§",
            Mail_Adresi: "aylinngulenc@gmail.com",
            Telefon: "5553456789",
            Egitim_Durumu: "Lisans Mezunu",
            Universite: "Kocaeli Ãœniversitesi",
            Bolum: "Bilgisayar MÃ¼hendisliÄŸi",
            Sinif: "Mezun",
            Aldigi_Dersler: "YazÄ±lÄ±m Teknolojileri ve Yapay Zeka",
            Tarih: "2023-04-17",
          },
          {
            submission_id: "4",
            Ad: "Berkay",
            Soyad: "Acar",
            Mail_Adresi: "berkayxx_123@hotmail.com",
            Telefon: "5554567890",
            Egitim_Durumu: "Lisans Ã–ÄŸrencisi",
            Universite: "BartÄ±n Ãœniversitesi",
            Bolum: "Bilgisayar MÃ¼hendisliÄŸi",
            Sinif: "1. SÄ±nÄ±f",
            Aldigi_Dersler: "YazÄ±lÄ±m Teknolojileri ve Yapay Zeka, Dijital Pazarlama, SatÄ±ÅŸ ve Pazarlama",
            Tarih: "2023-04-18",
          },
          {
            submission_id: "5",
            Ad: "Sude Beyza",
            Soyad: "TÃ¼rkoÄŸlu",
            Mail_Adresi: "beyzasude55@gmail.com",
            Telefon: "5555678901",
            Egitim_Durumu: "Lisans Ã–ÄŸrencisi",
            Universite: "Ä°stinye Ãœniversitesi",
            Bolum: "Ä°ngiliz Dili ve EdebiyatÄ±",
            Sinif: "3. SÄ±nÄ±f",
            Aldigi_Dersler:
              "SatÄ±ÅŸ, Pazarlama ve Marka Yaratma, Dijital Pazarlama, Influencer Marketing ve GiriÅŸimcilik, Ä°nsan KaynaklarÄ± ve Yetenek KazanÄ±mÄ±",
            Tarih: "2023-04-19",
          },
        ]

  // Initialize results array with submission IDs
  useEffect(() => {
    if (mockSubmissions.length > 0 && results.length === 0) {
      const initialResults = mockSubmissions.map((submission) => ({
        submission_id: submission.submission_id,
        payment_possibility: "dÃ¼ÅŸÃ¼k" as const,
        justification: "",
        buyer_persona: "",
        conversion_score: 0,
        recommended_strategy: "",
        next_action: "",
        isAnalyzing: false,
      }))
      setResults(initialResults)
    }
  }, [mockSubmissions, results.length])

  // Extract unique values for filter options
  const uniqueEducationStatuses = useMemo(() => {
    return [...new Set(mockSubmissions.map((s) => s.Egitim_Durumu))]
  }, [mockSubmissions])

  const uniqueBuyerPersonas = useMemo(() => {
    return [...new Set(results.filter((r) => r.buyer_persona).map((r) => r.buyer_persona))]
  }, [results])

  const uniqueNextActions = useMemo(() => {
    return [...new Set(results.filter((r) => r.next_action).map((r) => r.next_action))]
  }, [results])

  // Apply filters to results
  const filteredResults = useMemo(() => {
    return results.filter((result) => {
      const submission = mockSubmissions.find((s) => s.submission_id === result.submission_id)
      if (!submission) return false

      // Search term filter
      const searchLower = filterOptions.searchTerm.toLowerCase()
      const nameMatches = `${submission.Ad} ${submission.Soyad}`.toLowerCase().includes(searchLower)
      const universityMatches = submission.Universite.toLowerCase().includes(searchLower)
      const departmentMatches = submission.Bolum.toLowerCase().includes(searchLower)
      const searchMatches = nameMatches || universityMatches || departmentMatches
      if (filterOptions.searchTerm && !searchMatches) return false

      // Payment possibility filter
      if (
        filterOptions.paymentPossibility.length > 0 &&
        !filterOptions.paymentPossibility.includes(result.payment_possibility)
      ) {
        return false
      }

      // Buyer persona filter
      if (filterOptions.buyerPersona.length > 0 && !filterOptions.buyerPersona.includes(result.buyer_persona)) {
        return false
      }

      // Score range filter
      if (result.conversion_score < filterOptions.minScore || result.conversion_score > filterOptions.maxScore) {
        return false
      }

      // Education status filter
      if (
        filterOptions.educationStatus.length > 0 &&
        !filterOptions.educationStatus.includes(submission.Egitim_Durumu)
      ) {
        return false
      }

      // Next action filter
      if (filterOptions.nextAction.length > 0 && !filterOptions.nextAction.includes(result.next_action)) {
        return false
      }

      return true
    })
  }, [results, mockSubmissions, filterOptions])

  // Format submission data for Gemini
  const formatSubmissionForGemini = (submission: SubmissionData) => {
    return `
Ad: ${submission.Ad} ${submission.Soyad}
EÄŸitim Durumu: ${submission.Egitim_Durumu}
Ãœniversite: ${submission.Universite}
BÃ¶lÃ¼m: ${submission.Bolum}
SÄ±nÄ±f: ${submission.Sinif}
SeÃ§tiÄŸi Dersler: ${submission.Aldigi_Dersler}
Mail: ${submission.Mail_Adresi}
    `
  }

  // Parse Gemini response (JSON string) to object
  const parseGeminiResponse = (response: string): Partial<AnalysisResult> => {
    try {
      // Try to parse the JSON directly
      const jsonMatch = response.match(/```json\n([\s\S]*?)\n```/)
      const jsonString = jsonMatch ? jsonMatch[1] : response

      return JSON.parse(jsonString)
    } catch (error) {
      console.error("Error parsing Gemini response:", error)
      return {
        error: "Analiz sonucu iÅŸlenemedi. LÃ¼tfen tekrar deneyin.",
      }
    }
  }

  // Analyze a single submission
  const analyzeSubmission = async (index: number) => {
    const submission = mockSubmissions[index]

    // Update state to show this submission is being analyzed
    setResults((prev) => prev.map((result, i) => (i === index ? { ...result, isAnalyzing: true } : result)))

    try {
      // Send to Gemini
      const formattedInput = formatSubmissionForGemini(submission)
      const response = await sendMessage(formattedInput)

      // Parse response
      const analysisResult = parseGeminiResponse(response)

      // Update results
      setResults((prev) =>
        prev.map((result, i) =>
          i === index
            ? {
                ...result,
                ...analysisResult,
                isAnalyzing: false,
              }
            : result,
        ),
      )

      return true
    } catch (error) {
      console.error("Error analyzing submission:", error)

      // Update results with error
      setResults((prev) =>
        prev.map((result, i) =>
          i === index
            ? {
                ...result,
                error: "Analiz sÄ±rasÄ±nda bir hata oluÅŸtu.",
                isAnalyzing: false,
              }
            : result,
        ),
      )

      return false
    }
  }

  // Start analyzing all submissions
  const startAnalysis = async () => {
    setIsAnalyzing(true)
    setProgress(0)

    // Reset all results
    setResults(
      mockSubmissions.map((submission) => ({
        submission_id: submission.submission_id,
        payment_possibility: "dÃ¼ÅŸÃ¼k" as const,
        justification: "",
        buyer_persona: "",
        conversion_score: 0,
        recommended_strategy: "",
        next_action: "",
        isAnalyzing: false,
      })),
    )

    // Analyze each submission sequentially
    for (let i = 0; i < mockSubmissions.length; i++) {
      setCurrentIndex(i)
      await analyzeSubmission(i)
      setProgress(((i + 1) / mockSubmissions.length) * 100)
    }

    setCurrentIndex(null)
    setIsAnalyzing(false)
  }

  // Open drawer with selected result details
  const openDrawer = (result: AnalysisResult) => {
    const submission = mockSubmissions.find((s) => s.submission_id === result.submission_id)
    if (submission) {
      setSelectedResult(result)
      setSelectedSubmission(submission)
      setIsDrawerOpen(true)
    }
  }

  // Reset all filters
  const resetFilters = () => {
    setFilterOptions({
      searchTerm: "",
      paymentPossibility: [],
      buyerPersona: [],
      minScore: 0,
      maxScore: 100,
      educationStatus: [],
      nextAction: [],
    })
  }

  // Toggle filter selection
  const toggleFilter = (type: keyof FilterOptions, value: string) => {
    setFilterOptions((prev) => {
      const currentValues = prev[type] as string[]
      return {
        ...prev,
        [type]: currentValues.includes(value) ? currentValues.filter((v) => v !== value) : [...currentValues, value],
      }
    })
  }

  // Get color based on payment possibility
  const getPossibilityColor = (possibility: string) => {
    switch (possibility) {
      case "yÃ¼ksek":
        return "bg-secondary-500"
      case "orta":
        return "bg-primary-300"
      case "dÃ¼ÅŸÃ¼k":
        return "bg-primary-100"
      default:
        return "bg-gray-300"
    }
  }

  // Get color for conversion score
  const getScoreColor = (score: number) => {
    if (score >= 70) return "text-secondary-500"
    if (score >= 40) return "text-primary-500"
    return "text-primary-300"
  }

  // Get icon for buyer persona
  const getPersonaIcon = (persona: string) => {
    if (persona.includes("kariyer")) return <Briefcase className="h-4 w-4" />
    if (persona.includes("akademik")) return <GraduationCap className="h-4 w-4" />
    if (persona.includes("hobi")) return <BookOpen className="h-4 w-4" />
    if (persona.includes("zorunlu")) return <FileText className="h-4 w-4" />
    return <Users className="h-4 w-4" />
  }

  // Get icon for next action
  const getActionIcon = (action: string) => {
    if (action.includes("mail")) return <Mail className="h-4 w-4" />
    if (action.includes("telefon")) return <Phone className="h-4 w-4" />
    if (action.includes("indirim")) return <Zap className="h-4 w-4" />
    return <ArrowRight className="h-4 w-4" />
  }

  // Calculate statistics
  const stats = useMemo(() => {
    const analyzedResults = results.filter((r) => r.justification)
    if (analyzedResults.length === 0) return { avgScore: 0, highPotential: 0, mediumPotential: 0, lowPotential: 0 }

    const avgScore = analyzedResults.reduce((sum, r) => sum + r.conversion_score, 0) / analyzedResults.length
    const highPotential = analyzedResults.filter((r) => r.payment_possibility === "yÃ¼ksek").length
    const mediumPotential = analyzedResults.filter((r) => r.payment_possibility === "orta").length
    const lowPotential = analyzedResults.filter((r) => r.payment_possibility === "dÃ¼ÅŸÃ¼k").length

    return { avgScore, highPotential, mediumPotential, lowPotential }
  }, [results])

  return (
    <div className="container mx-auto p-4 max-w-7xl">
      <div className="mb-8">
        <div className="flex flex-col md:flex-row md:items-center justify-between mb-6">
          <div>
            <h1 className="text-3xl font-bold mb-2">Potansiyel MÃ¼ÅŸteri Analizi</h1>
            <p className="text-muted-foreground">Gemini AI ile potansiyel mÃ¼ÅŸteri deÄŸerlendirmesi ve dÃ¶nÃ¼ÅŸÃ¼m analizi</p>
          </div>

          <div className="flex items-center gap-3 mt-4 md:mt-0">
            <Button
              onClick={() => setIsFilterOpen(!isFilterOpen)}
              variant="outline"
              className="flex items-center gap-2"
            >
              <Filter className="h-4 w-4" />
              Filtrele
              {Object.values(filterOptions).some((v) =>
                Array.isArray(v) ? v.length > 0 : typeof v === "string" ? v !== "" : false,
              ) && (
                <Badge className="h-5 w-5 p-0 flex items-center justify-center rounded-full">
                  {
                    Object.values(filterOptions).filter((v) =>
                      Array.isArray(v) ? v.length > 0 : typeof v === "string" ? v !== "" : false,
                    ).length
                  }
                </Badge>
              )}
            </Button>

            <Button
              onClick={startAnalysis}
              disabled={isAnalyzing}
              className="bg-primary-500 hover:bg-primary-600 text-white"
            >
              {isAnalyzing ? (
                <>
                  <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                  Analiz Ediliyor
                </>
              ) : (
                <>
                  <RefreshCw className="mr-2 h-4 w-4" />
                  TÃ¼mÃ¼nÃ¼ Analiz Et
                </>
              )}
            </Button>
          </div>
        </div>

        {isFilterOpen && (
          <Card className="mb-6 border-primary-100">
            <CardHeader className="pb-2">
              <div className="flex items-center justify-between">
                <CardTitle className="text-lg flex items-center gap-2">
                  <Filter className="h-4 w-4" />
                  Filtreleme SeÃ§enekleri
                </CardTitle>
                <Button variant="ghost" size="sm" onClick={resetFilters} className="h-8">
                  Filtreleri Temizle
                </Button>
              </div>
            </CardHeader>
            <CardContent>
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                <div>
                  <label className="text-sm font-medium mb-2 block">Arama</label>
                  <div className="relative">
                    <Search className="absolute left-2 top-2.5 h-4 w-4 text-muted-foreground" />
                    <Input
                      placeholder="Ä°sim, Ã¼niversite veya bÃ¶lÃ¼m ara..."
                      className="pl-8"
                      value={filterOptions.searchTerm}
                      onChange={(e) => setFilterOptions({ ...filterOptions, searchTerm: e.target.value })}
                    />
                  </div>
                </div>

                <div>
                  <label className="text-sm font-medium mb-2 block">Ã–deme OlasÄ±lÄ±ÄŸÄ±</label>
                  <div className="flex flex-wrap gap-2">
                    {["yÃ¼ksek", "orta", "dÃ¼ÅŸÃ¼k"].map((possibility) => (
                      <Badge
                        key={possibility}
                        variant={filterOptions.paymentPossibility.includes(possibility) ? "default" : "outline"}
                        className={`cursor-pointer ${
                          filterOptions.paymentPossibility.includes(possibility)
                            ? getPossibilityColor(possibility)
                            : "hover:bg-muted"
                        }`}
                        onClick={() => toggleFilter("paymentPossibility", possibility)}
                      >
                        {possibility.toUpperCase()}
                      </Badge>
                    ))}
                  </div>
                </div>

                <div>
                  <label className="text-sm font-medium mb-2 block">EÄŸitim Durumu</label>
                  <div className="flex flex-wrap gap-2">
                    {uniqueEducationStatuses.map((status) => (
                      <Badge
                        key={status}
                        variant={filterOptions.educationStatus.includes(status) ? "default" : "outline"}
                        className={`cursor-pointer ${
                          filterOptions.educationStatus.includes(status) ? "bg-primary-500" : "hover:bg-muted"
                        }`}
                        onClick={() => toggleFilter("educationStatus", status)}
                      >
                        {status}
                      </Badge>
                    ))}
                  </div>
                </div>

                {uniqueBuyerPersonas.length > 0 && (
                  <div>
                    <label className="text-sm font-medium mb-2 block">AlÄ±cÄ± Profili</label>
                    <div className="flex flex-wrap gap-2">
                      {uniqueBuyerPersonas.map((persona) => (
                        <Badge
                          key={persona}
                          variant={filterOptions.buyerPersona.includes(persona) ? "default" : "outline"}
                          className={`cursor-pointer ${
                            filterOptions.buyerPersona.includes(persona) ? "bg-secondary-500" : "hover:bg-muted"
                          }`}
                          onClick={() => toggleFilter("buyerPersona", persona)}
                        >
                          {persona}
                        </Badge>
                      ))}
                    </div>
                  </div>
                )}

                {uniqueNextActions.length > 0 && (
                  <div>
                    <label className="text-sm font-medium mb-2 block">Sonraki AdÄ±m</label>
                    <div className="flex flex-wrap gap-2">
                      {uniqueNextActions.map((action) => (
                        <Badge
                          key={action}
                          variant={filterOptions.nextAction.includes(action) ? "default" : "outline"}
                          className={`cursor-pointer ${
                            filterOptions.nextAction.includes(action) ? "bg-primary-500" : "hover:bg-muted"
                          }`}
                          onClick={() => toggleFilter("nextAction", action)}
                        >
                          {action}
                        </Badge>
                      ))}
                    </div>
                  </div>
                )}

                <div>
                  <label className="text-sm font-medium mb-2 block">DÃ¶nÃ¼ÅŸÃ¼m Skoru AralÄ±ÄŸÄ±</label>
                  <div className="px-2">
                    <Slider
                      defaultValue={[0, 100]}
                      min={0}
                      max={100}
                      step={1}
                      value={[filterOptions.minScore, filterOptions.maxScore]}
                      onValueChange={(value) =>
                        setFilterOptions({
                          ...filterOptions,
                          minScore: value[0],
                          maxScore: value[1],
                        })
                      }
                      className="my-4"
                    />
                    <div className="flex justify-between text-sm text-muted-foreground">
                      <span>{filterOptions.minScore}</span>
                      <span>{filterOptions.maxScore}</span>
                    </div>
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>
        )}

        {isAnalyzing && (
          <div className="mb-6">
            <Progress value={progress} className="h-2 mb-2" />
            <p className="text-sm text-muted-foreground">
              {currentIndex !== null ? `${currentIndex + 1}/${mockSubmissions.length} analiz ediliyor` : ""}
            </p>
          </div>
        )}

        {results.some((r) => r.justification) && (
          <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-6">
            <Card className="bg-gradient-to-br from-primary-50 to-white">
              <CardContent className="pt-6">
                <div className="flex items-center justify-between">
                  <div className="flex items-center gap-2">
                    <div className="bg-primary-100 p-2 rounded-full">
                      <BarChart3 className="h-5 w-5 text-primary-500" />
                    </div>
                    <div>
                      <p className="text-sm font-medium text-muted-foreground">Ortalama Skor</p>
                      <p className="text-2xl font-bold">{stats.avgScore.toFixed(1)}</p>
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>

            <Card className="bg-gradient-to-br from-secondary-50 to-white">
              <CardContent className="pt-6">
                <div className="flex items-center justify-between">
                  <div className="flex items-center gap-2">
                    <div className="bg-secondary-100 p-2 rounded-full">
                      <TrendingUp className="h-5 w-5 text-secondary-500" />
                    </div>
                    <div>
                      <p className="text-sm font-medium text-muted-foreground">YÃ¼ksek Potansiyel</p>
                      <p className="text-2xl font-bold">{stats.highPotential}</p>
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>

            <Card className="bg-gradient-to-br from-primary-50 to-white">
              <CardContent className="pt-6">
                <div className="flex items-center justify-between">
                  <div className="flex items-center gap-2">
                    <div className="bg-primary-100 p-2 rounded-full">
                      <Target className="h-5 w-5 text-primary-500" />
                    </div>
                    <div>
                      <p className="text-sm font-medium text-muted-foreground">Orta Potansiyel</p>
                      <p className="text-2xl font-bold">{stats.mediumPotential}</p>
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>

            <Card className="bg-gradient-to-br from-primary-50 to-white">
              <CardContent className="pt-6">
                <div className="flex items-center justify-between">
                  <div className="flex items-center gap-2">
                    <div className="bg-primary-100 p-2 rounded-full">
                      <Award className="h-5 w-5 text-primary-300" />
                    </div>
                    <div>
                      <p className="text-sm font-medium text-muted-foreground">DÃ¼ÅŸÃ¼k Potansiyel</p>
                      <p className="text-2xl font-bold">{stats.lowPotential}</p>
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>
          </div>
        )}
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {filteredResults.map((result, index) => {
          const submission = mockSubmissions.find((s) => s.submission_id === result.submission_id)
          if (!submission) return null

          return (
            <Card
              key={result.submission_id}
              className="overflow-hidden border-t-4 shadow-md hover:shadow-lg transition-shadow duration-300"
              style={{
                borderTopColor:
                  result.conversion_score >= 70 ? "#008C45" : result.conversion_score >= 40 ? "#B80012" : "#FFBFC3",
              }}
            >
              <CardHeader className="pb-2">
                <div className="flex justify-between items-start">
                  <div>
                    <CardTitle className="text-xl">
                      {submission.Ad} {submission.Soyad}
                    </CardTitle>
                    <CardDescription className="flex items-center gap-1">
                      <GraduationCap className="h-3.5 w-3.5" />
                      {submission.Egitim_Durumu} - {submission.Sinif}
                    </CardDescription>
                  </div>
                  {result.isAnalyzing ? (
                    <Loader2 className="h-5 w-5 animate-spin text-primary-500" />
                  ) : result.error ? (
                    <AlertCircle className="h-5 w-5 text-red-500" />
                  ) : result.justification ? (
                    <CheckCircle className="h-5 w-5 text-secondary-500" />
                  ) : null}
                </div>
              </CardHeader>

              <CardContent className="pb-2">
                <div className="mb-3">
                  <p className="text-sm font-medium text-muted-foreground mb-1 flex items-center gap-1">
                    <Briefcase className="h-3.5 w-3.5" />
                    Ãœniversite / BÃ¶lÃ¼m
                  </p>
                  <p className="text-sm">
                    {submission.Universite} / {submission.Bolum}
                  </p>
                </div>

                <div className="mb-3">
                  <p className="text-sm font-medium text-muted-foreground mb-1 flex items-center gap-1">
                    <BookOpen className="h-3.5 w-3.5" />
                    SeÃ§ilen Dersler
                  </p>
                  <p className="text-sm line-clamp-2">{submission.Aldigi_Dersler}</p>
                </div>

                {result.justification ? (
                  <>
                    <div className="flex items-center justify-between mb-3 mt-4">
                      <div>
                        <p className="text-sm font-medium text-muted-foreground">Ã–deme OlasÄ±lÄ±ÄŸÄ±</p>
                        <Badge className={`mt-1 ${getPossibilityColor(result.payment_possibility)} text-white`}>
                          {result.payment_possibility.toUpperCase()}
                        </Badge>
                      </div>
                      <div className="text-right">
                        <p className="text-sm font-medium text-muted-foreground">DÃ¶nÃ¼ÅŸÃ¼m Skoru</p>
                        <p className={`text-xl font-bold ${getScoreColor(result.conversion_score)}`}>
                          {result.conversion_score}
                        </p>
                      </div>
                    </div>

                    <div className="mb-3">
                      <p className="text-sm font-medium text-muted-foreground mb-1">AlÄ±cÄ± Profili</p>
                      <Badge variant="outline" className="bg-gray-50 flex items-center gap-1">
                        {getPersonaIcon(result.buyer_persona)}
                        {result.buyer_persona}
                      </Badge>
                    </div>

                    <div className="mb-3">
                      <p className="text-sm font-medium text-muted-foreground mb-1">Sonraki AdÄ±m</p>
                      <Badge variant="outline" className="bg-gray-50 flex items-center gap-1">
                        {getActionIcon(result.next_action)}
                        {result.next_action}
                      </Badge>
                    </div>
                  </>
                ) : result.error ? (
                  <div className="p-3 bg-red-50 text-red-500 rounded-md text-sm mt-3">{result.error}</div>
                ) : (
                  <div className="h-[150px] flex items-center justify-center">
                    <p className="text-muted-foreground text-sm">HenÃ¼z analiz edilmedi</p>
                  </div>
                )}
              </CardContent>

              <CardFooter className="pt-2">
                {result.justification ? (
                  <Button
                    variant="outline"
                    className="w-full text-primary-500 border-primary-200 hover:bg-primary-50 flex items-center gap-2"
                    onClick={() => openDrawer(result)}
                  >
                    DetaylÄ± Analizi GÃ¶rÃ¼ntÃ¼le <ArrowRight className="h-4 w-4" />
                  </Button>
                ) : !result.isAnalyzing && !result.error ? (
                  <Button variant="outline" className="w-full" onClick={() => analyzeSubmission(index)}>
                    Analiz Et
                  </Button>
                ) : null}
              </CardFooter>
            </Card>
          )
        })}

        {filteredResults.length === 0 && (
          <div className="col-span-full flex flex-col items-center justify-center p-8 text-center">
            <div className="bg-primary-50 p-4 rounded-full mb-4">
              <Search className="h-8 w-8 text-primary-500" />
            </div>
            <h3 className="text-lg font-medium mb-2">SonuÃ§ BulunamadÄ±</h3>
            <p className="text-muted-foreground mb-4">Arama kriterlerinize uygun potansiyel mÃ¼ÅŸteri bulunamadÄ±.</p>
            <Button variant="outline" onClick={resetFilters}>
              Filtreleri Temizle
            </Button>
          </div>
        )}
      </div>

      <Drawer open={isDrawerOpen} onOpenChange={setIsDrawerOpen}>
        <DrawerContent>
          <div className="mx-auto w-full max-w-4xl">
            <DrawerHeader>
              <DrawerTitle className="text-2xl font-bold">Potansiyel MÃ¼ÅŸteri Analizi</DrawerTitle>
              <DrawerDescription>
                {selectedSubmission &&
                  `${selectedSubmission.Ad} ${selectedSubmission.Soyad} iÃ§in detaylÄ± analiz sonuÃ§larÄ±`}
              </DrawerDescription>
            </DrawerHeader>

            <ScrollArea className="h-[calc(80vh-10rem)] px-6">
              {selectedSubmission && selectedResult && (
                <div className="pb-8">
                  <Tabs defaultValue="overview" className="w-full">
                    <TabsList className="grid w-full grid-cols-3">
                      <TabsTrigger value="overview">Genel BakÄ±ÅŸ</TabsTrigger>
                      <TabsTrigger value="details">DetaylÄ± Analiz</TabsTrigger>
                      <TabsTrigger value="profile">Profil Bilgileri</TabsTrigger>
                    </TabsList>

                    <TabsContent value="overview" className="pt-6">
                      <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-6">
                        <Card>
                          <CardHeader className="pb-2">
                            <CardTitle className="text-base">Ã–deme OlasÄ±lÄ±ÄŸÄ±</CardTitle>
                          </CardHeader>
                          <CardContent>
                            <div className="flex items-center gap-2">
                              <Badge
                                className={`${getPossibilityColor(selectedResult.payment_possibility)} text-white`}
                              >
                                {selectedResult.payment_possibility.toUpperCase()}
                              </Badge>
                            </div>
                          </CardContent>
                        </Card>

                        <Card>
                          <CardHeader className="pb-2">
                            <CardTitle className="text-base">DÃ¶nÃ¼ÅŸÃ¼m Skoru</CardTitle>
                          </CardHeader>
                          <CardContent>
                            <div className="flex items-center gap-2">
                              <div className={`text-3xl font-bold ${getScoreColor(selectedResult.conversion_score)}`}>
                                {selectedResult.conversion_score}
                              </div>
                              <div className="text-sm text-muted-foreground">/ 100</div>
                            </div>
                          </CardContent>
                        </Card>

                        <Card>
                          <CardHeader className="pb-2">
                            <CardTitle className="text-base">AlÄ±cÄ± Profili</CardTitle>
                          </CardHeader>
                          <CardContent>
                            <Badge variant="outline" className="bg-gray-50 flex items-center gap-1">
                              {getPersonaIcon(selectedResult.buyer_persona)}
                              {selectedResult.buyer_persona}
                            </Badge>
                          </CardContent>
                        </Card>
                      </div>

                      <Card className="mb-6">
                        <CardHeader className="pb-2">
                          <CardTitle className="text-base">DeÄŸerlendirme</CardTitle>
                        </CardHeader>
                        <CardContent>
                          <p className="text-sm">{selectedResult.justification}</p>
                        </CardContent>
                      </Card>

                      <Card>
                        <CardHeader className="pb-2">
                          <CardTitle className="text-base">Ã–nerilen Strateji</CardTitle>
                        </CardHeader>
                        <CardContent>
                          <p className="text-sm">{selectedResult.recommended_strategy}</p>

                          <div className="mt-4 pt-4 border-t">
                            <div className="flex items-center justify-between">
                              <p className="text-sm font-medium">Sonraki AdÄ±m</p>
                              <Badge variant="outline" className="bg-gray-50 flex items-center gap-1">
                                {getActionIcon(selectedResult.next_action)}
                                {selectedResult.next_action}
                              </Badge>
                            </div>
                          </div>
                        </CardContent>
                      </Card>
                    </TabsContent>

                    <TabsContent value="details" className="pt-6">
                      <Card>
                        <CardHeader>
                          <CardTitle>DetaylÄ± Analiz Raporu</CardTitle>
                          <CardDescription>
                            Gemini AI tarafÄ±ndan gerÃ§ekleÅŸtirilen kapsamlÄ± deÄŸerlendirme
                          </CardDescription>
                        </CardHeader>
                        <CardContent>
                          <div className="space-y-6">
                            <div>
                              <h4 className="text-sm font-medium mb-2 flex items-center gap-2">
                                <Target className="h-4 w-4 text-primary-500" />
                                Ã–deme OlasÄ±lÄ±ÄŸÄ± DeÄŸerlendirmesi
                              </h4>
                              <p className="text-sm text-muted-foreground">{selectedResult.justification}</p>
                            </div>

                            <Separator />

                            <div>
                              <h4 className="text-sm font-medium mb-2 flex items-center gap-2">
                                <Users className="h-4 w-4 text-primary-500" />
                                AlÄ±cÄ± Profili Analizi
                              </h4>
                              <div className="flex items-center gap-2 mb-2">
                                <Badge variant="outline" className="bg-gray-50 flex items-center gap-1">
                                  {getPersonaIcon(selectedResult.buyer_persona)}
                                  {selectedResult.buyer_persona}
                                </Badge>
                              </div>
                              <p className="text-sm text-muted-foreground">
                                Bu profil, adayÄ±n eÄŸitim durumu, seÃ§tiÄŸi dersler ve kariyer hedefleri gÃ¶z Ã¶nÃ¼nde
                                bulundurularak belirlenmiÅŸtir.
                              </p>
                            </div>

                            <Separator />

                            <div>
                              <h4 className="text-sm font-medium mb-2 flex items-center gap-2">
                                <BarChart3 className="h-4 w-4 text-primary-500" />
                                DÃ¶nÃ¼ÅŸÃ¼m Skoru DetaylarÄ±
                              </h4>
                              <div className="flex items-center gap-2 mb-2">
                                <div className={`text-2xl font-bold ${getScoreColor(selectedResult.conversion_score)}`}>
                                  {selectedResult.conversion_score}
                                </div>
                                <div className="text-sm text-muted-foreground">/ 100</div>
                              </div>
                              <p className="text-sm text-muted-foreground">
                                {selectedResult.conversion_score >= 70
                                  ? "YÃ¼ksek dÃ¶nÃ¼ÅŸÃ¼m potansiyeli. AdayÄ±n satÄ±n alma olasÄ±lÄ±ÄŸÄ± oldukÃ§a yÃ¼ksek."
                                  : selectedResult.conversion_score >= 40
                                    ? "Orta seviye dÃ¶nÃ¼ÅŸÃ¼m potansiyeli. DoÄŸru stratejilerle satÄ±n alma olasÄ±lÄ±ÄŸÄ± artÄ±rÄ±labilir."
                                    : "DÃ¼ÅŸÃ¼k dÃ¶nÃ¼ÅŸÃ¼m potansiyeli. SatÄ±n alma olasÄ±lÄ±ÄŸÄ± dÃ¼ÅŸÃ¼k, uzun vadeli iliÅŸki kurulmasÄ± Ã¶nerilir."}
                              </p>
                            </div>

                            <Separator />

                            <div>
                              <h4 className="text-sm font-medium mb-2 flex items-center gap-2">
                                <Zap className="h-4 w-4 text-primary-500" />
                                Ã–nerilen Pazarlama Stratejisi
                              </h4>
                              <p className="text-sm text-muted-foreground">{selectedResult.recommended_strategy}</p>
                            </div>

                            <Separator />

                            <div>
                              <h4 className="text-sm font-medium mb-2 flex items-center gap-2">
                                <ArrowRight className="h-4 w-4 text-primary-500" />
                                Sonraki AdÄ±m Ã–nerisi
                              </h4>
                              <Badge variant="outline" className="bg-gray-50 flex items-center gap-1">
                                {getActionIcon(selectedResult.next_action)}
                                {selectedResult.next_action}
                              </Badge>
                              <p className="text-sm text-muted-foreground mt-2">
                                {selectedResult.next_action.includes("mail")
                                  ? "Adaya Ã¶zel hazÄ±rlanmÄ±ÅŸ bir kampanya e-postasÄ± gÃ¶nderilmesi Ã¶nerilir."
                                  : selectedResult.next_action.includes("telefon")
                                    ? "Adayla telefon gÃ¶rÃ¼ÅŸmesi yapÄ±larak daha detaylÄ± bilgi verilmesi Ã¶nerilir."
                                    : "Adaya Ã¶zel indirim veya teklif sunulmasÄ± Ã¶nerilir."}
                              </p>
                            </div>
                          </div>
                        </CardContent>
                      </Card>
                    </TabsContent>

                    <TabsContent value="profile" className="pt-6">
                      <Card>
                        <CardHeader>
                          <CardTitle>Aday Profil Bilgileri</CardTitle>
                          <CardDescription>BaÅŸvuru formunda belirtilen bilgiler</CardDescription>
                        </CardHeader>
                        <CardContent>
                          <div className="space-y-4">
                            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                              <div>
                                <h4 className="text-sm font-medium mb-1 flex items-center gap-2">
                                  <Users className="h-4 w-4 text-primary-500" />
                                  Ad Soyad
                                </h4>
                                <p className="text-sm">
                                  {selectedSubmission.Ad} {selectedSubmission.Soyad}
                                </p>
                              </div>

                              <div>
                                <h4 className="text-sm font-medium mb-1 flex items-center gap-2">
                                  <Mail className="h-4 w-4 text-primary-500" />
                                  E-posta Adresi
                                </h4>
                                <p className="text-sm">{selectedSubmission.Mail_Adresi}</p>
                              </div>
                            </div>

                            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                              <div>
                                <h4 className="text-sm font-medium mb-1 flex items-center gap-2">
                                  <Phone className="h-4 w-4 text-primary-500" />
                                  Telefon
                                </h4>
                                <p className="text-sm">{selectedSubmission.Telefon}</p>
                              </div>

                              <div>
                                <h4 className="text-sm font-medium mb-1 flex items-center gap-2">
                                  <Calendar className="h-4 w-4 text-primary-500" />
                                  BaÅŸvuru Tarihi
                                </h4>
                                <p className="text-sm">{selectedSubmission.Tarih}</p>
                              </div>
                            </div>

                            <Separator />

                            <div>
                              <h4 className="text-sm font-medium mb-1 flex items-center gap-2">
                                <GraduationCap className="h-4 w-4 text-primary-500" />
                                EÄŸitim Bilgileri
                              </h4>
                              <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mt-2">
                                <div>
                                  <p className="text-xs text-muted-foreground">EÄŸitim Durumu</p>
                                  <p className="text-sm">{selectedSubmission.Egitim_Durumu}</p>
                                </div>

                                <div>
                                  <p className="text-xs text-muted-foreground">SÄ±nÄ±f</p>
                                  <p className="text-sm">{selectedSubmission.Sinif}</p>
                                </div>

                                <div>
                                  <p className="text-xs text-muted-foreground">Ãœniversite</p>
                                  <p className="text-sm">{selectedSubmission.Universite}</p>
                                </div>

                                <div>
                                  <p className="text-xs text-muted-foreground">BÃ¶lÃ¼m</p>
                                  <p className="text-sm">{selectedSubmission.Bolum}</p>
                                </div>
                              </div>
                            </div>

                            <Separator />

                            <div>
                              <h4 className="text-sm font-medium mb-1 flex items-center gap-2">
                                <BookOpen className="h-4 w-4 text-primary-500" />
                                SeÃ§ilen Dersler
                              </h4>
                              <p className="text-sm">{selectedSubmission.Aldigi_Dersler}</p>
                            </div>
                          </div>
                        </CardContent>
                      </Card>
                    </TabsContent>
                  </Tabs>
                </div>
              )}
            </ScrollArea>

            <DrawerFooter className="flex justify-between">
              <Button variant="outline" onClick={() => setIsDrawerOpen(false)}>
                Kapat
              </Button>
              {selectedResult && (
                <Button
                  className="bg-primary-500 hover:bg-primary-600 text-white"
                  onClick={() => {
                    // Here you could implement an action like exporting the analysis
                    alert("Analiz raporu indiriliyor...")
                  }}
                >
                  Raporu Ä°ndir
                </Button>
              )}
            </DrawerFooter>
          </div>
        </DrawerContent>
      </Drawer>
    </div>
  )
}

